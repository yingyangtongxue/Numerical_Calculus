# -*- coding: utf-8 -*-
"""Numerical_Calculus_LU_decomposition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/yingyangtongxue/Numerical_Calculus/blob/main/Numerical_Calculus_LU_decomposition.ipynb
"""

import fractions
def FractionToFloat(A):
  A = [round(float(fractions.Fraction(x)), 2) for x in A]
  return A

def substituition_upper(A, b):
  n = len(A)
  x = np.empty((n))
  x[n-1] = b[n-1] / A[n-1, n-1]
  for focus in range(n-2, -1, -1):
    sums = b[focus]
    for j in range(focus+1, n):
      sums = sums - A[focus, j] * x[j]
    x[focus] = sums / A[focus, focus]

  return x

import numpy as np

def LU_decomposition(A):
  A = np.array(A,dtype=float) #convert to float list
  print("\n A = L * U")
  print("A:\n", A, "\n")
  U = np.copy(A) 
  print("U:\n", U, "\n")
  n = np.shape(U)[0] #first row length
  L = np.eye(n) #Identity matrix
  print("Attention: L -> Built from the identity matrix\n")
  print("The elements of the matrix L are the multiples of the first element of\n the row of A to be zeroed divided by the above pivot in the same column")
  for j in np.arange(n-1): # j = row (start -> j=0 in [0,1,...,n-1])
    for i in np.arange(j+1,n): # i = column (start -> i=0 in [j+1,j+2,...,n])
      print("L:",L,"\n")
      L[i,j] = U[i,j]/U[j,j] 
      print("Pivot = a["+str(j+1)+","+str(j+1)+"] = "+str(U[j,j])+"   (Attention: the first element is a[1,1])")
      print("Element below the pivot = "+" a["+str(i+1)+","+str(j+1)+"] = "+str(U[i,j]))
      print("Multiplier = a["+str(i+1)+","+str(j+1)+"]/pivot = "+str(U[i,j])+'/'+str(U[j,j])+" = "+str(L[i,j])+"\n")
      for k in np.arange(j+1,n):
        old = U[i,k]
        U[i,k] = U[i,k] - L[i,j] * U[j,k]
        print("U["+str(i+1)+","+str(k+1)+"] = "+"U["+str(i+1)+","+str(k+1)+"] - multiplier * pivot = "+str(old)+" - "+str(L[i,j])+" * "+str(U[j,k])+" = "+str(U[i,k])+"\n")
        print("U:\n", U, "\n")
      U[i,j] = 0

  return L,U

#fraction to float
data = [1.5,2,3.5, '25/221', 25/221, 1]
data = [str(round(float(fractions.Fraction(x)), 2)) for x in data]
#print("A:\n", FractionToFloat(data))

A = [[2.0,-1.0,1.0],
     [3.0,3.0,9.0],
     [3.0,3.0,5.0]]

A1 = [[2,-1,1],
     [3,3,9],
     [3,3,5]]

L, U = LU_decomposition(A)

print("\nRESULT: \n")
print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)

A = [[2.0,-1.0,1.0],
     [3.0,3.0,9.0],
     [3.0,3.0,5.0]]

print("\nRESULTADO 1-A: \n")

L, U = LU_decomposition(A)

print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)