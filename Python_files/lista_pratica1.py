# -*- coding: utf-8 -*-
"""Lista_pratica1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dB8RezTpJ4yN7Cd_SN9HE-_W1ISv8lkK
"""

import numpy as np

def is_Symmetrical(M):
    for i in range(len(M)):
        for j  in range(len(M[0])):
            if M[i][j] != M[j][i]:
                return False
    return True

def square(M):
    M = np.array(M)
    if M.shape[0] == M.shape[1]:
      return True
    return False

def isMatrixPositive(M):
  n = np.shape(M)[0] #first row length
  for i in range(n):
    if not M[i][i] > 0:
      return False
  return True

"""# **Decomposição LU**"""

import numpy as np

def LU_decomposition(A):
  A = np.array(A,dtype=float) #convert to float list
  U = np.copy(A) 
  n = np.shape(U)[0] #first row length
  L = np.eye(n) #Identity matrix
  for j in np.arange(n-1): # j = row (start -> j=0 in [0,1,...,n-1])
    for i in np.arange(j+1,n): # i = column (start -> i=0 in [j+1,j+2,...,n])
      L[i,j] = U[i,j]/U[j,j] 
      for k in np.arange(j+1,n):
        old = U[i,k]
        U[i,k] = U[i,k] - L[i,j] * U[j,k]
      U[i,j] = 0

  return L,U

"""1) Escreva uma função em Python para realizar a decomposição LU, e depois teste
seu algoritmo para as seguintes matrizes:

a) A = [[2.0,-1.0,1.0],
     [3.0,3.0,9.0],
     [3.0,3.0,5.0]]

b) A = [[1.012,-2.132,3.104],
      [-2.132,4.906,-7.013],
      [3.104,-7.013,0.014]]

c) A = [[2,0,0,0],
      [1,1.5,0,0],
      [0,-3,0.5,0],
      [2,-2,1,1]]

d) A = [[2.1756,4.0231,-2.1732,5.1967],
        [-4.0231,6.0000,0,1.1973],
        [-1.0000,-5.2107,1.1111,0],
        [6.0235,7.0000,0,-4.1561]]

RESOLUÇÃO:

1-a)
"""

A = [[2.0,-1.0,1.0],
     [3.0,3.0,9.0],
     [3.0,3.0,5.0]]

print("\nRESULTADO 1-A: \n")

L, U = LU_decomposition(A)

print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)

"""1-b)"""

A = [[1.012,-2.132,3.104],
    [-2.132,4.906,-7.013],
    [3.104,-7.013,0.014]]

print("\nRESULTADO 1-B: \n")

L, U = LU_decomposition(A)

print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)

"""1-c)"""

A = [[2,0,0,0],
      [1,1.5,0,0],
      [0,-3,0.5,0],
      [2,-2,1,1]]
     
print("\nRESULTADO 1-C: \n")

L, U = LU_decomposition(A)

print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)

"""1-d)"""

A = [[2.1756,4.0231,-2.1732,5.1967],
        [-4.0231,6.0000,0,1.1973],
        [-1.0000,-5.2107,1.1111,0],
        [6.0235,7.0000,0,-4.1561]]

print("\nRESULTADO 1-D: \n")

L, U = LU_decomposition(A)

print("\n A = L * U")
print("\nA:\n",A)
print("\nL (Lower Matrix):\n",L)
print("\nU (Upper Matrix):\n",U)

"""# **Decomposição Cholesky**

2) Escreva uma função em Python para realizar a decomposição Cholesky, e
depois teste seu algoritmo para as seguintes matrizes:

a) A = [[2,-1,0],
      [-1,2,-1],
      [0,-1,2]]

b) A = [[4,1,1,1],
      [1,3,-1,1],
      [1,-1,2,0],
      [1,1,0,2]]

c) A = [[4,1,-1,0],
      [1,3,-1,0],
      [-1,-1,5,2],
      [0,0,2,4]]

d) A = [[6,2,1,-1],
      [2,4,1,0],
      [1,1,4,-1],
      [-1,0,-1,3]]
"""

def cholesky_Decomposition(A):
  A = np.array(A,dtype=float) #convert to float list
  if not square(A):
    print("Error! The matrix isn't square")
  if not (isMatrixPositive(A) and is_Symmetrical(A)): # elements above and below the main diagonal must be equal 
    print("Error! The matrix isn't symmetric")
  else:
    n = A.shape[0]
    L = np.zeros_like(A)
    for i in range(n):
        L[i,i] = np.sqrt(A[i,i])
        L[i+1:,i] = A[i+1:,i] / L[i, i]
        for j in range(i+1,n):
            A[j:,j] = A[j:,j] - L[j,i] * L[j:,i]
    return L

"""2-a)

"""

A = [[2,-1,0],
      [-1,2,-1],
      [0,-1,2]]

print("\nRESULTADO 2-A: \n")
A = cholesky_Decomposition(A)  
print("\nA:\n",A)

"""2-b)"""

A = [[4,1,1,1],
      [1,3,-1,1],
      [1,-1,2,0],
      [1,1,0,2]]

print("\nRESULTADO 2-B: \n")
A = cholesky_Decomposition(A)  
print("\nA:\n",A)

"""2-c)"""

A = [[4,1,-1,0],
      [1,3,-1,0],
      [-1,-1,5,2],
      [0,0,2,4]]

print("\nRESULTADO 2-C: \n")
A = cholesky_Decomposition(A)  
print("\nA:\n",A)

"""2-d)"""

A = [[6,2,1,-1],
      [2,4,1,0],
      [1,1,4,-1],
      [-1,0,-1,3]]

print("\nRESULTADO 2-D: \n")
A = cholesky_Decomposition(A)  
print("\nA:\n",A)